{"name": "Test GET all books - With Pagination", "status": "failed", "statusDetails": {"message": "AssertionError: assert 4 <= 1\n +  where 4 = len([{'author': 'Test Author 1', 'category': 'Testing', 'created_at': '2025-06-18T14:45:38.138149', 'description': 'A book created by Python tests.', ...}, {'author': 'F. Scott Fitzgerald', 'category': 'Fiction', 'created_at': '2025-05-19T17:59:00.862364', 'description': 'A classic novel', ...}, {'author': 'Test Author 2', 'category': 'Development', 'created_at': '2025-06-18T14:45:38.233121', 'description': 'Another book for testing.', ...}, {'author': 'test', 'category': 't', 'created_at': '2025-05-20T19:30:56.238960', 'description': 't', ...}])", "trace": "self = <test_book_api.TestBookAPI object at 0x104a59760>\n\n    @allure.story(\"Pagination\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.title(\"Test GET all books - With Pagination\")\n    def test_get_all_books_with_pagination(self):\n        \"\"\"Test GET all books - With Pagination\"\"\"\n        with allure.step(\"Get initial count of books\"):\n            initial_response = self.client.get(f\"{self.client.base_url}{BASE_PATH}\")\n            assert initial_response.ok\n            initial_books = initial_response.json()\n            initial_count = len(initial_books)\n    \n        with allure.step(\"Create multiple books\"):\n            for book in EXAMPLE_BOOKS:\n                create_response = self.client.post(f\"{self.client.base_url}{BASE_PATH}\", json=book)\n                assert create_response.ok\n                created_book = create_response.json()\n                self.created_book_ids.append(created_book[\"id\"])\n    \n        with allure.step(\"Test skip\"):\n            skip_response = self.client.get(f\"{self.client.base_url}{BASE_PATH}?skip=1\")\n            assert skip_response.ok\n            skip_books = skip_response.json()\n            assert len(skip_books) <= initial_count + len(self.created_book_ids)\n    \n        with allure.step(\"Test limit\"):\n            limit_response = self.client.get(f\"{self.client.base_url}{BASE_PATH}?limit=1\")\n            assert limit_response.ok\n            limit_books = limit_response.json()\n>           assert len(limit_books) <= 1\nE           AssertionError: assert 4 <= 1\nE            +  where 4 = len([{'author': 'Test Author 1', 'category': 'Testing', 'created_at': '2025-06-18T14:45:38.138149', 'description': 'A book created by Python tests.', ...}, {'author': 'F. Scott Fitzgerald', 'category': 'Fiction', 'created_at': '2025-05-19T17:59:00.862364', 'description': 'A classic novel', ...}, {'author': 'Test Author 2', 'category': 'Development', 'created_at': '2025-06-18T14:45:38.233121', 'description': 'Another book for testing.', ...}, {'author': 'test', 'category': 't', 'created_at': '2025-05-20T19:30:56.238960', 'description': 't', ...}])\n\ntests/test_book_api.py:148: AssertionError"}, "description": "Test GET all books - With Pagination", "steps": [{"name": "Get initial count of books", "status": "passed", "start": 1750257938013, "stop": 1750257938073}, {"name": "Create multiple books", "status": "passed", "start": 1750257938073, "stop": 1750257938232}, {"name": "Test skip", "status": "passed", "start": 1750257938232, "stop": 1750257938293}, {"name": "Test limit", "status": "failed", "statusDetails": {"message": "AssertionError: assert 4 <= 1\n +  where 4 = len([{'author': 'Test Author 1', 'category': 'Testing', 'created_at': '2025-06-18T14:45:38.138149', 'description': 'A book created by Python tests.', ...}, {'author': 'F. Scott Fitzgerald', 'category': 'Fiction', 'created_at': '2025-05-19T17:59:00.862364', 'description': 'A classic novel', ...}, {'author': 'Test Author 2', 'category': 'Development', 'created_at': '2025-06-18T14:45:38.233121', 'description': 'Another book for testing.', ...}, {'author': 'test', 'category': 't', 'created_at': '2025-05-20T19:30:56.238960', 'description': 't', ...}])\n", "trace": "  File \"/Users/r.vanderhorst/develop/pythonfortesters/practiceautomatedtesting/api/tests/test_book_api.py\", line 148, in test_get_all_books_with_pagination\n    assert len(limit_books) <= 1\n"}, "start": 1750257938293, "stop": 1750257938375}], "start": 1750257938013, "stop": 1750257938376, "uuid": "defdf10c-e428-4c74-95e4-c525844383c1", "historyId": "e473d1eaded2b571a25faac3f0fb010b", "testCaseId": "e473d1eaded2b571a25faac3f0fb010b", "fullName": "tests.test_book_api.TestBookAPI#test_get_all_books_with_pagination", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Book Management"}, {"name": "epic", "value": "Book API"}, {"name": "story", "value": "Pagination"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_book_api"}, {"name": "subSuite", "value": "TestBookAPI"}, {"name": "host", "value": "Rs-MacBook-Pro-2.local"}, {"name": "thread", "value": "56688-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_book_api"}]}