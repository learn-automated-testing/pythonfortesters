{"uid":"9665afad3e6d04a0","name":"test_datepicker_interactions","fullName":"test_datepicker.TestDatepicker#test_datepicker_interactions","historyId":"f053efc8d5265b6a76ab58cd47204ac6","time":{"start":1750257999587,"stop":1750258002424,"duration":2837},"status":"broken","statusMessage":"selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\n  (Session info: chrome=137.0.7151.105)\nStacktrace:\n0   chromedriver                        0x00000001045e9d14 cxxbridge1$str$ptr + 2735276\n1   chromedriver                        0x00000001045e1f88 cxxbridge1$str$ptr + 2703136\n2   chromedriver                        0x0000000104132564 cxxbridge1$string$len + 90028\n3   chromedriver                        0x00000001041c2744 cxxbridge1$string$len + 680332\n4   chromedriver                        0x00000001041bb0c8 cxxbridge1$string$len + 650000\n5   chromedriver                        0x000000010416dbe8 cxxbridge1$string$len + 333360\n6   chromedriver                        0x00000001045ad598 cxxbridge1$str$ptr + 2487600\n7   chromedriver                        0x00000001045b0830 cxxbridge1$str$ptr + 2500552\n8   chromedriver                        0x000000010458dc14 cxxbridge1$str$ptr + 2358188\n9   chromedriver                        0x00000001045b10b8 cxxbridge1$str$ptr + 2502736\n10  chromedriver                        0x000000010457edec cxxbridge1$str$ptr + 2297220\n11  chromedriver                        0x00000001045d1420 cxxbridge1$str$ptr + 2634680\n12  chromedriver                        0x00000001045d15ac cxxbridge1$str$ptr + 2635076\n13  chromedriver                        0x00000001045e1bd4 cxxbridge1$str$ptr + 2702188\n14  libsystem_pthread.dylib             0x00000001959adc0c _pthread_start + 136\n15  libsystem_pthread.dylib             0x00000001959a8b80 thread_start + 8","statusTrace":"self = <test_datepicker.TestDatepicker object at 0x1075148e0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"97bd72cca475ea8739230dd47567fd8a\")>\n\n    def test_datepicker_interactions(self, driver):\n        try:\n            # Navigate to the web elements page\n            logger.info(\"Navigating to the web elements page\")\n            driver.get(\"https://practiceautomatedtesting.com/webelements\")\n    \n            # Click on Widgets menu\n            logger.info(\"Looking for Widgets menu\")\n            widgets_menu = WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable((By.XPATH, \"//summary[contains(., 'Widgets')]\"))\n            )\n            widgets_menu.click()\n            logger.info(\"Clicked Widgets menu\")\n    \n            # Click on Date Picker link\n            logger.info(\"Looking for Date Picker link\")\n            datepicker_link = WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable((By.XPATH, \"//a[contains(., 'Date Picker')]\"))\n            )\n            datepicker_link.click()\n            logger.info(\"Clicked Date Picker link\")\n    \n            # Wait for the datepicker component to be visible\n            logger.info(\"Waiting for datepicker component\")\n            WebDriverWait(driver, 10).until(\n                EC.visibility_of_element_located((By.CSS_SELECTOR, \"[class*='componentContainer']\"))\n            )\n    \n            # Find the date input element\n            logger.info(\"Looking for date input element\")\n            date_input = WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"input[type='date']\"))\n            )\n    \n            # Get the position of the date input\n            input_rect = date_input.rect\n    \n            # Try clicking at different positions, more to the left\n            positions = [\n                (input_rect['x'] + input_rect['width'] - 35, input_rect['y'] + (input_rect['height'] / 2)),  # 35px from right\n                (input_rect['x'] + input_rect['width'] - 40, input_rect['y'] + (input_rect['height'] / 2)),  # 40px from right\n                (input_rect['x'] + input_rect['width'] - 45, input_rect['y'] + (input_rect['height'] / 2)),  # 45px from right\n            ]\n    \n            for i, (icon_x, icon_y) in enumerate(positions):\n                # Add a visual indicator at the click position\n                logger.info(f\"Adding visual indicator at click position {i+1}\")\n                driver.execute_script(\"\"\"\n                    var dot = document.createElement('div');\n                    dot.style.position = 'absolute';\n                    dot.style.left = arguments[0] + 'px';\n                    dot.style.top = arguments[1] + 'px';\n                    dot.style.width = '10px';\n                    dot.style.height = '10px';\n                    dot.style.backgroundColor = 'red';\n                    dot.style.borderRadius = '50%';\n                    dot.style.zIndex = '10000';\n                    document.body.appendChild(dot);\n                \"\"\", icon_x, icon_y)\n    \n                # Take a screenshot before clicking\n                logger.info(f\"Taking screenshot before click {i+1}\")\n                driver.save_screenshot(f'datepicker-before-click-{i+1}.png')\n    \n                # Create ActionChains instance\n                actions = ActionChains(driver)\n    \n                # Move to the calendar icon position and click\n                logger.info(f\"Clicking calendar icon at position {i+1}\")\n>               actions.move_by_offset(icon_x, icon_y).click().perform()\n\ntest_datepicker.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/common/action_chains.py:94: in perform\n    self.w3c_actions.perform()\n../../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/common/actions/action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n../../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1075c62e0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"move target out of bounds\",\"message\":\"move target out of bounds\\\\n  (Sess...0001959adc0c _pthread_start + 136\\\\n15  libsystem_pthread.dylib             0x00000001959a8b80 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\nE         (Session info: chrome=137.0.7151.105)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001045e9d14 cxxbridge1$str$ptr + 2735276\nE       1   chromedriver                        0x00000001045e1f88 cxxbridge1$str$ptr + 2703136\nE       2   chromedriver                        0x0000000104132564 cxxbridge1$string$len + 90028\nE       3   chromedriver                        0x00000001041c2744 cxxbridge1$string$len + 680332\nE       4   chromedriver                        0x00000001041bb0c8 cxxbridge1$string$len + 650000\nE       5   chromedriver                        0x000000010416dbe8 cxxbridge1$string$len + 333360\nE       6   chromedriver                        0x00000001045ad598 cxxbridge1$str$ptr + 2487600\nE       7   chromedriver                        0x00000001045b0830 cxxbridge1$str$ptr + 2500552\nE       8   chromedriver                        0x000000010458dc14 cxxbridge1$str$ptr + 2358188\nE       9   chromedriver                        0x00000001045b10b8 cxxbridge1$str$ptr + 2502736\nE       10  chromedriver                        0x000000010457edec cxxbridge1$str$ptr + 2297220\nE       11  chromedriver                        0x00000001045d1420 cxxbridge1$str$ptr + 2634680\nE       12  chromedriver                        0x00000001045d15ac cxxbridge1$str$ptr + 2635076\nE       13  chromedriver                        0x00000001045e1bd4 cxxbridge1$str$ptr + 2702188\nE       14  libsystem_pthread.dylib             0x00000001959adc0c _pthread_start + 136\nE       15  libsystem_pthread.dylib             0x00000001959a8b80 thread_start + 8\n\n../../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:229: MoveTargetOutOfBoundsException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1750257999074,"stop":1750257999587,"duration":513},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\n  (Session info: chrome=137.0.7151.105)\nStacktrace:\n0   chromedriver                        0x00000001045e9d14 cxxbridge1$str$ptr + 2735276\n1   chromedriver                        0x00000001045e1f88 cxxbridge1$str$ptr + 2703136\n2   chromedriver                        0x0000000104132564 cxxbridge1$string$len + 90028\n3   chromedriver                        0x00000001041c2744 cxxbridge1$string$len + 680332\n4   chromedriver                        0x00000001041bb0c8 cxxbridge1$string$len + 650000\n5   chromedriver                        0x000000010416dbe8 cxxbridge1$string$len + 333360\n6   chromedriver                        0x00000001045ad598 cxxbridge1$str$ptr + 2487600\n7   chromedriver                        0x00000001045b0830 cxxbridge1$str$ptr + 2500552\n8   chromedriver                        0x000000010458dc14 cxxbridge1$str$ptr + 2358188\n9   chromedriver                        0x00000001045b10b8 cxxbridge1$str$ptr + 2502736\n10  chromedriver                        0x000000010457edec cxxbridge1$str$ptr + 2297220\n11  chromedriver                        0x00000001045d1420 cxxbridge1$str$ptr + 2634680\n12  chromedriver                        0x00000001045d15ac cxxbridge1$str$ptr + 2635076\n13  chromedriver                        0x00000001045e1bd4 cxxbridge1$str$ptr + 2702188\n14  libsystem_pthread.dylib             0x00000001959adc0c _pthread_start + 136\n15  libsystem_pthread.dylib             0x00000001959a8b80 thread_start + 8","statusTrace":"self = <test_datepicker.TestDatepicker object at 0x1075148e0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"97bd72cca475ea8739230dd47567fd8a\")>\n\n    def test_datepicker_interactions(self, driver):\n        try:\n            # Navigate to the web elements page\n            logger.info(\"Navigating to the web elements page\")\n            driver.get(\"https://practiceautomatedtesting.com/webelements\")\n    \n            # Click on Widgets menu\n            logger.info(\"Looking for Widgets menu\")\n            widgets_menu = WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable((By.XPATH, \"//summary[contains(., 'Widgets')]\"))\n            )\n            widgets_menu.click()\n            logger.info(\"Clicked Widgets menu\")\n    \n            # Click on Date Picker link\n            logger.info(\"Looking for Date Picker link\")\n            datepicker_link = WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable((By.XPATH, \"//a[contains(., 'Date Picker')]\"))\n            )\n            datepicker_link.click()\n            logger.info(\"Clicked Date Picker link\")\n    \n            # Wait for the datepicker component to be visible\n            logger.info(\"Waiting for datepicker component\")\n            WebDriverWait(driver, 10).until(\n                EC.visibility_of_element_located((By.CSS_SELECTOR, \"[class*='componentContainer']\"))\n            )\n    \n            # Find the date input element\n            logger.info(\"Looking for date input element\")\n            date_input = WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"input[type='date']\"))\n            )\n    \n            # Get the position of the date input\n            input_rect = date_input.rect\n    \n            # Try clicking at different positions, more to the left\n            positions = [\n                (input_rect['x'] + input_rect['width'] - 35, input_rect['y'] + (input_rect['height'] / 2)),  # 35px from right\n                (input_rect['x'] + input_rect['width'] - 40, input_rect['y'] + (input_rect['height'] / 2)),  # 40px from right\n                (input_rect['x'] + input_rect['width'] - 45, input_rect['y'] + (input_rect['height'] / 2)),  # 45px from right\n            ]\n    \n            for i, (icon_x, icon_y) in enumerate(positions):\n                # Add a visual indicator at the click position\n                logger.info(f\"Adding visual indicator at click position {i+1}\")\n                driver.execute_script(\"\"\"\n                    var dot = document.createElement('div');\n                    dot.style.position = 'absolute';\n                    dot.style.left = arguments[0] + 'px';\n                    dot.style.top = arguments[1] + 'px';\n                    dot.style.width = '10px';\n                    dot.style.height = '10px';\n                    dot.style.backgroundColor = 'red';\n                    dot.style.borderRadius = '50%';\n                    dot.style.zIndex = '10000';\n                    document.body.appendChild(dot);\n                \"\"\", icon_x, icon_y)\n    \n                # Take a screenshot before clicking\n                logger.info(f\"Taking screenshot before click {i+1}\")\n                driver.save_screenshot(f'datepicker-before-click-{i+1}.png')\n    \n                # Create ActionChains instance\n                actions = ActionChains(driver)\n    \n                # Move to the calendar icon position and click\n                logger.info(f\"Clicking calendar icon at position {i+1}\")\n>               actions.move_by_offset(icon_x, icon_y).click().perform()\n\ntest_datepicker.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/common/action_chains.py:94: in perform\n    self.w3c_actions.perform()\n../../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/common/actions/action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n../../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1075c62e0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"move target out of bounds\",\"message\":\"move target out of bounds\\\\n  (Sess...0001959adc0c _pthread_start + 136\\\\n15  libsystem_pthread.dylib             0x00000001959a8b80 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\nE         (Session info: chrome=137.0.7151.105)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001045e9d14 cxxbridge1$str$ptr + 2735276\nE       1   chromedriver                        0x00000001045e1f88 cxxbridge1$str$ptr + 2703136\nE       2   chromedriver                        0x0000000104132564 cxxbridge1$string$len + 90028\nE       3   chromedriver                        0x00000001041c2744 cxxbridge1$string$len + 680332\nE       4   chromedriver                        0x00000001041bb0c8 cxxbridge1$string$len + 650000\nE       5   chromedriver                        0x000000010416dbe8 cxxbridge1$string$len + 333360\nE       6   chromedriver                        0x00000001045ad598 cxxbridge1$str$ptr + 2487600\nE       7   chromedriver                        0x00000001045b0830 cxxbridge1$str$ptr + 2500552\nE       8   chromedriver                        0x000000010458dc14 cxxbridge1$str$ptr + 2358188\nE       9   chromedriver                        0x00000001045b10b8 cxxbridge1$str$ptr + 2502736\nE       10  chromedriver                        0x000000010457edec cxxbridge1$str$ptr + 2297220\nE       11  chromedriver                        0x00000001045d1420 cxxbridge1$str$ptr + 2634680\nE       12  chromedriver                        0x00000001045d15ac cxxbridge1$str$ptr + 2635076\nE       13  chromedriver                        0x00000001045e1bd4 cxxbridge1$str$ptr + 2702188\nE       14  libsystem_pthread.dylib             0x00000001959adc0c _pthread_start + 136\nE       15  libsystem_pthread.dylib             0x00000001959a8b80 thread_start + 8\n\n../../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:229: MoveTargetOutOfBoundsException","steps":[],"attachments":[{"uid":"cb8d8d0a1dda6f17","name":"log","source":"cb8d8d0a1dda6f17.txt","type":"text/plain","size":1566}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1750258002471,"stop":1750258002546,"duration":75},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_datepicker"},{"name":"subSuite","value":"TestDatepicker"},{"name":"host","value":"Rs-MacBook-Pro-2.local"},{"name":"thread","value":"56966-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_datepicker"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"9665afad3e6d04a0.json","parameterValues":[]}