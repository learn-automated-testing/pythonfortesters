{"name": "test_resize_limits", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\n  (Session info: chrome=137.0.7151.105)\nStacktrace:\n0   chromedriver                        0x0000000103181d14 cxxbridge1$str$ptr + 2735276\n1   chromedriver                        0x0000000103179f88 cxxbridge1$str$ptr + 2703136\n2   chromedriver                        0x0000000102cca564 cxxbridge1$string$len + 90028\n3   chromedriver                        0x0000000102d5a744 cxxbridge1$string$len + 680332\n4   chromedriver                        0x0000000102d530c8 cxxbridge1$string$len + 650000\n5   chromedriver                        0x0000000102d05be8 cxxbridge1$string$len + 333360\n6   chromedriver                        0x0000000103145598 cxxbridge1$str$ptr + 2487600\n7   chromedriver                        0x0000000103148830 cxxbridge1$str$ptr + 2500552\n8   chromedriver                        0x0000000103125c14 cxxbridge1$str$ptr + 2358188\n9   chromedriver                        0x00000001031490b8 cxxbridge1$str$ptr + 2502736\n10  chromedriver                        0x0000000103116dec cxxbridge1$str$ptr + 2297220\n11  chromedriver                        0x0000000103169420 cxxbridge1$str$ptr + 2634680\n12  chromedriver                        0x00000001031695ac cxxbridge1$str$ptr + 2635076\n13  chromedriver                        0x0000000103179bd4 cxxbridge1$str$ptr + 2702188\n14  libsystem_pthread.dylib             0x00000001959adc0c _pthread_start + 136\n15  libsystem_pthread.dylib             0x00000001959a8b80 thread_start + 8", "trace": "self = <test_resize.TestResize object at 0x10754ccd0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7be7642f98c8621fb37e51925c3f390c\")>\n\n    def test_resize_limits(self, driver):\n        self.navigate_to_resize_page(driver)\n    \n        # Get the resizable element and resize handle\n        resizable_element = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"div[style*='background: rgb(227, 242, 253)']\"))\n        )\n        resize_handle = driver.find_element(By.CSS_SELECTOR, \"div[title='Resize']\")\n    \n        # Try to resize beyond maximum (500x500)\n        actions = ActionChains(driver)\n        actions.move_to_element(resize_handle)\n        actions.click_and_hold()\n        actions.move_by_offset(300, 300)\n        actions.release()\n>       actions.perform()\n\ntest_resize.py:168: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/common/action_chains.py:94: in perform\n    self.w3c_actions.perform()\n../../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/common/actions/action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n../../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107811f70>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"move target out of bounds\",\"message\":\"move target out of bounds\\\\n  (Sess...0001959adc0c _pthread_start + 136\\\\n15  libsystem_pthread.dylib             0x00000001959a8b80 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\nE         (Session info: chrome=137.0.7151.105)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000103181d14 cxxbridge1$str$ptr + 2735276\nE       1   chromedriver                        0x0000000103179f88 cxxbridge1$str$ptr + 2703136\nE       2   chromedriver                        0x0000000102cca564 cxxbridge1$string$len + 90028\nE       3   chromedriver                        0x0000000102d5a744 cxxbridge1$string$len + 680332\nE       4   chromedriver                        0x0000000102d530c8 cxxbridge1$string$len + 650000\nE       5   chromedriver                        0x0000000102d05be8 cxxbridge1$string$len + 333360\nE       6   chromedriver                        0x0000000103145598 cxxbridge1$str$ptr + 2487600\nE       7   chromedriver                        0x0000000103148830 cxxbridge1$str$ptr + 2500552\nE       8   chromedriver                        0x0000000103125c14 cxxbridge1$str$ptr + 2358188\nE       9   chromedriver                        0x00000001031490b8 cxxbridge1$str$ptr + 2502736\nE       10  chromedriver                        0x0000000103116dec cxxbridge1$str$ptr + 2297220\nE       11  chromedriver                        0x0000000103169420 cxxbridge1$str$ptr + 2634680\nE       12  chromedriver                        0x00000001031695ac cxxbridge1$str$ptr + 2635076\nE       13  chromedriver                        0x0000000103179bd4 cxxbridge1$str$ptr + 2702188\nE       14  libsystem_pthread.dylib             0x00000001959adc0c _pthread_start + 136\nE       15  libsystem_pthread.dylib             0x00000001959a8b80 thread_start + 8\n\n../../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:229: MoveTargetOutOfBoundsException"}, "start": 1750258077641, "stop": 1750258079181, "uuid": "c70248a1-5a4b-4109-b03a-728146a79019", "historyId": "a934e8db3d89edd0b940837221d89743", "testCaseId": "a934e8db3d89edd0b940837221d89743", "fullName": "test_resize.TestResize#test_resize_limits", "labels": [{"name": "suite", "value": "test_resize"}, {"name": "subSuite", "value": "TestResize"}, {"name": "host", "value": "Rs-MacBook-Pro-2.local"}, {"name": "thread", "value": "56966-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_resize"}]}