{"uid":"2620dbfb22b16674","name":"Test GET all books - With Search Query","fullName":"tests.test_book_api.TestBookAPI#test_get_all_books_with_search","historyId":"f36c12495b52f3e04dc3a921bb645c86","time":{"start":1750257937295,"stop":1750257937518,"duration":223},"description":"Test GET all books - With Search Query","descriptionHtml":"<p>Test GET all books - With Search Query</p>\n","status":"failed","statusMessage":"AssertionError: assert 'Python Test Book 1' in 'Updated Book Title'","statusTrace":"self = <test_book_api.TestBookAPI object at 0x104a51ee0>\n\n    @allure.story(\"Search Books\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.title(\"Test GET all books - With Search Query\")\n    def test_get_all_books_with_search(self):\n        \"\"\"Test GET all books - With Search Query\"\"\"\n        with allure.step(\"Create a book with specific title\"):\n            create_response = self.client.post(\n                f\"{self.client.base_url}{BASE_PATH}\",\n                json=EXAMPLE_BOOKS[0]\n            )\n            assert create_response.ok\n            created_book = create_response.json()\n            self.created_book_ids.append(created_book[\"id\"])\n    \n        with allure.step(\"Search for the book\"):\n            search_response = self.client.get(f\"{self.client.base_url}{BASE_PATH}?q=Python Test Book 1\")\n            assert search_response.ok\n            search_results = search_response.json()\n            assert len(search_results) > 0\n>           assert \"Python Test Book 1\" in search_results[0][\"title\"]\nE           AssertionError: assert 'Python Test Book 1' in 'Updated Book Title'\n\ntests/test_book_api.py:75: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1750257936757,"stop":1750257936758,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_client","time":{"start":1750257936758,"stop":1750257936758,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1750257937295,"stop":1750257937295,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test GET all books - With Search Query","status":"failed","statusMessage":"AssertionError: assert 'Python Test Book 1' in 'Updated Book Title'","statusTrace":"self = <test_book_api.TestBookAPI object at 0x104a51ee0>\n\n    @allure.story(\"Search Books\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.title(\"Test GET all books - With Search Query\")\n    def test_get_all_books_with_search(self):\n        \"\"\"Test GET all books - With Search Query\"\"\"\n        with allure.step(\"Create a book with specific title\"):\n            create_response = self.client.post(\n                f\"{self.client.base_url}{BASE_PATH}\",\n                json=EXAMPLE_BOOKS[0]\n            )\n            assert create_response.ok\n            created_book = create_response.json()\n            self.created_book_ids.append(created_book[\"id\"])\n    \n        with allure.step(\"Search for the book\"):\n            search_response = self.client.get(f\"{self.client.base_url}{BASE_PATH}?q=Python Test Book 1\")\n            assert search_response.ok\n            search_results = search_response.json()\n            assert len(search_results) > 0\n>           assert \"Python Test Book 1\" in search_results[0][\"title\"]\nE           AssertionError: assert 'Python Test Book 1' in 'Updated Book Title'\n\ntests/test_book_api.py:75: AssertionError","steps":[{"name":"Create a book with specific title","time":{"start":1750257937295,"stop":1750257937413,"duration":118},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Search for the book","time":{"start":1750257937413,"stop":1750257937515,"duration":102},"status":"failed","statusMessage":"AssertionError: assert 'Python Test Book 1' in 'Updated Book Title'\n","statusTrace":"  File \"/Users/r.vanderhorst/develop/pythonfortesters/practiceautomatedtesting/api/tests/test_book_api.py\", line 75, in test_get_all_books_with_search\n    assert \"Python Test Book 1\" in search_results[0][\"title\"]\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":2,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1750257937526,"stop":1750257937614,"duration":88},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Book Management"},{"name":"epic","value":"Book API"},{"name":"story","value":"Search Books"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_book_api"},{"name":"subSuite","value":"TestBookAPI"},{"name":"host","value":"Rs-MacBook-Pro-2.local"},{"name":"thread","value":"56688-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_book_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"2620dbfb22b16674.json","parameterValues":[]}