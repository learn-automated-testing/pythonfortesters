name: Run Tests and Generate Reports

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip curl xvfb

      - name: Install Chrome
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install Allure commandline
        run: |
          wget -qO- https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.0/allure-commandline-2.24.0.tgz | tar -xz -C /opt/
          ln -s /opt/allure-2.24.0/bin/allure /usr/local/bin/allure

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest allure-pytest pytest-html requests python-dotenv selenium webdriver-manager

      - name: Create combined requirements.txt
        run: |
          cat practiceautomatedtesting/shopping/requirements.txt > combined_requirements.txt
          echo "" >> combined_requirements.txt
          cat practiceautomatedtesting/api/requirements.txt >> combined_requirements.txt
          # Remove duplicates
          sort combined_requirements.txt | uniq > temp_requirements.txt
          mv temp_requirements.txt combined_requirements.txt

      - name: Install project dependencies
        run: |
          pip install -r combined_requirements.txt

      - name: Set up environment variables
        run: |
          echo "CHROME_HEADLESS=true" >> $GITHUB_ENV
          echo "DISPLAY=:99" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV

      - name: Start virtual display
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Clean previous results
        run: |
          rm -rf allure-results allure-report allure-history

      - name: Download previous Allure history
        run: |
          echo "=== Downloading Allure History ==="
          echo "Current directory: $(pwd)"
          # Get the latest release
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')
          echo "Latest release tag: $LATEST_RELEASE"
          
          if [ "$LATEST_RELEASE" != "null" ]; then
            echo "Found latest release: $LATEST_RELEASE"
            # Download the history artifact from the release
            echo "Downloading from: https://github.com/${{ github.repository }}/releases/download/$LATEST_RELEASE/allure-history.zip"
            curl -L -o allure-history.zip "https://github.com/${{ github.repository }}/releases/download/$LATEST_RELEASE/allure-history.zip"
            echo "Download completed. File size: $(ls -la allure-history.zip)"
            
            if [ -f "allure-history.zip" ] && [ -s "allure-history.zip" ]; then
              echo "Unzipping history file..."
              unzip -o allure-history.zip
              echo "History extracted. Contents:"
              ls -la allure-history/ || echo "No allure-history directory"
              if [ -d "allure-history/history" ]; then
                echo "History subdirectory contents:"
                ls -la allure-history/history/
              fi
              echo "History downloaded successfully"
            else
              echo "No valid history artifact found in release (file is empty or missing)"
            fi
          else
            echo "No releases found, starting fresh"
          fi
        continue-on-error: true

      - name: Setup Allure history
        run: |
          if [ -d "allure-history/history" ]; then
            echo "Copying previous history to allure-results/history"
            mkdir -p allure-results
            cp -r allure-history/history allure-results/
          fi

      - name: Run WebElements tests
        run: |
          echo "=== Running WebElements Tests ==="
          cd practiceautomatedtesting/webelements
          echo "Current directory: $(pwd)"
          echo "Test files found: $(find . -name "test_*.py" | wc -l)"
          
          if pytest --alluredir=../../allure-results -v -n 2 --dist=loadfile; then
            echo "✅ WebElements tests completed successfully"
          else
            echo "⚠️ WebElements tests had issues (exit code: $?)"
          fi
          
          echo "=== WebElements Results ==="
          ls -la ../../allure-results/ || echo "No results found"
        continue-on-error: true
        env:
          CHROME_HEADLESS: true
          DISPLAY: :99

      - name: Run Shopping tests
        run: |
          echo "=== Running Shopping Tests ==="
          cd practiceautomatedtesting/shopping
          echo "Current directory: $(pwd)"
          echo "Test files found: $(find . -name "test_*.py" | wc -l)"
          
          if pytest --alluredir=../../allure-results -v -n 2 --dist=loadfile; then
            echo "✅ Shopping tests completed successfully"
          else
            echo "⚠️ Shopping tests had issues (exit code: $?)"
          fi
          
          echo "=== Shopping Results ==="
          ls -la ../../allure-results/ || echo "No results found"
        continue-on-error: true
        env:
          CHROME_HEADLESS: true
          DISPLAY: :99

      - name: Run API tests
        run: |
          echo "=== Running API Tests ==="
          cd practiceautomatedtesting/api
          echo "Current directory: $(pwd)"
          echo "Test files found: $(find . -name "test_*.py" | wc -l)"
          
          if pytest --alluredir=../../allure-results -v -n 2 --dist=loadfile; then
            echo "✅ API tests completed successfully"
          else
            echo "⚠️ API tests had issues (exit code: $?)"
          fi
          
          echo "=== API Results ==="
          ls -la ../../allure-results/ || echo "No results found"
        continue-on-error: true

      - name: Generate Allure Report
        run: |
          allure generate allure-results --clean -o allure-report

      - name: Upload Allure Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 30
          if-no-files-found: error

      - name: Upload Allure history
        if: always()
        run: |
          echo "=== Debugging Allure History Upload ==="
          echo "Current directory: $(pwd)"
          echo "Allure report directory exists: $(test -d "allure-report" && echo "YES" || echo "NO")"
          echo "Allure report contents:"
          ls -la allure-report/ || echo "No allure-report directory"
          
          if [ -d "allure-report/history" ]; then
            echo "History directory exists, creating zip file"
            echo "History directory contents:"
            ls -la allure-report/history/
            mkdir -p allure-history
            cp -r allure-report/history allure-history/
            echo "Allure history directory contents:"
            ls -la allure-history/
            zip -r allure-history.zip allure-history/
            echo "Zip file created:"
            ls -la allure-history.zip
            echo "Zip file contents:"
            unzip -l allure-history.zip
          else
            echo "No history directory found in allure-report"
            echo "Creating empty history structure for first run"
            mkdir -p allure-history/history
            echo "First run - no previous history" > allure-history/history/placeholder.txt
            zip -r allure-history.zip allure-history/
            echo "Created placeholder history zip"
          fi

      - name: Create GitHub Release
        if: always()
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: allure-history-${{ github.run_number }}
          name: Allure History - Run ${{ github.run_number }}
          body: |
            Allure history files for trend analysis
            Generated from workflow run ${{ github.run_number }}
          draft: false
          prerelease: false
          files: allure-history.zip

      - name: Create test artifact for verification
        if: always()
        run: |
          echo "Creating test file for artifact verification"
          mkdir -p test-artifact
          echo "This is a test artifact created at $(date)" > test-artifact/test.txt
          echo "Test artifact contents:" > test-artifact/info.txt
          echo "Created to verify upload mechanism works" >> test-artifact/info.txt

      - name: Upload test artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifact-verification
          path: test-artifact/
          retention-days: 1

      - name: Generate Test Summary
        run: |
          echo "## Test Results Summary" >> test-summary.md
          echo "" >> test-summary.md
          echo "**Allure Report:** Available as artifact: allure-report" >> test-summary.md
          echo "**GitHub Pages:** Will be deployed automatically after successful run" >> test-summary.md
          echo "" >> test-summary.md
          
          # Count test files and results
          echo "### WebElements Tests" >> test-summary.md
          if [ -d "allure-results" ] && [ -n "$(find allure-results -name "*webelements*" -o -name "*test_*" | head -1)" ]; then
            echo "- Test results available in allure-results" >> test-summary.md
          else
            echo "- No test results found" >> test-summary.md
          fi
          
          echo "### Shopping Tests" >> test-summary.md
          if [ -d "allure-results" ] && [ -n "$(find allure-results -name "*shopping*" -o -name "*test_*" | head -1)" ]; then
            echo "- Test results available in allure-results" >> test-summary.md
          else
            echo "- No test results found" >> test-summary.md
          fi
          
          echo "### API Tests" >> test-summary.md
          if [ -d "allure-results" ] && [ -n "$(find allure-results -name "*api*" -o -name "*test_*" | head -1)" ]; then
            echo "- Test results available in allure-results" >> test-summary.md
          else
            echo "- No test results found" >> test-summary.md
          fi

      - name: Upload Test Summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md
          retention-days: 30

      - name: Comment PR with Test Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let summary = '';
            try {
              summary = fs.readFileSync('test-summary.md', 'utf8');
            } catch (error) {
              summary = '## Test Results Summary\n\nTest execution completed. Check artifacts for detailed results.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  deploy:
    needs: test-and-report
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: allure-report/
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report/
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 